#region --- License & Copyright Notice ---
/*
Useful code blocks that can included in your C# projects through NuGet
Copyright (c) 2012-2021 Jeevan James
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

<auto-generated>
    This code is downloaded from a CodeBits NuGet package.
</auto-generated>
*/
#endregion

#nullable enable

using System;
using System.ComponentModel;
using System.Globalization;

namespace CodeBits
{
    [TypeConverter(typeof(ShortGuidTypeConverter))]
    public readonly partial struct ShortGuid
    {
        private readonly Guid _guid;

        public ShortGuid(Guid guid)
        {
            _guid = guid;
        }

        public static ShortGuid NewValue()
        {
            return new ShortGuid(Guid.NewGuid());
        }

        public static ShortGuid Parse(ReadOnlySpan<char> input)
        {
            (bool success, byte[]? decoded, Exception? exception) = TryBase64UrlDecode(input);
            if (!success)
            {
                if (exception is not null)
                    throw exception;
                return new Guid(decoded ?? Array.Empty<byte>());
            }

            return new Guid(decoded ?? Array.Empty<byte>());
        }

        /// <summary>
        ///     Parses the given <paramref name="input"/> string into a <see cref="ShortGuid"/>.
        /// </summary>
        /// <param name="input">
        ///     The string to parse. This should be a valid string representation of a short GUID.
        /// </param>
        /// <returns>A <see cref="ShortGuid"/> instance parsed from the input string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     Thrown if <paramref name="input"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="ArgumentException">
        ///     Thrown if <paramref name="input"/> is invalid and cannot be parsed into a <see cref="ShortGuid"/>
        ///     instance.
        /// </exception>
        public static ShortGuid Parse(string input)
        {
            if (input is null)
                throw new ArgumentNullException(nameof(input));
            return Parse(input.AsSpan());
        }

        public static bool TryParse(ReadOnlySpan<char> input, out ShortGuid shortGuid)
        {
            (bool success, byte[]? decoded, _) = TryBase64UrlDecode(input);
            if (success)
            {
                shortGuid = new Guid(decoded ?? Array.Empty<byte>());
                return true;
            }

            shortGuid = default;
            return false;
        }

        /// <summary>
        ///     Attempts to parse the given <paramref name="input"/> string into a <see cref="ShortGuid"/>.
        /// </summary>
        /// <param name="input"></param>
        /// <param name="shortGuid"></param>
        /// <returns></returns>
        public static bool TryParse(string input, out ShortGuid shortGuid)
        {
            if (input is null)
                throw new ArgumentNullException(nameof(input));
            return TryParse(input.AsSpan(), out shortGuid);
        }

        /// <summary>
        ///     Converts this <see cref="ShortGuid"/> instance to a string.
        /// </summary>
        /// <returns>The string representation of this <see cref="ShortGuid"/> instance.</returns>
        /// <exception cref="InvalidOperationException">
        ///     Thrown if the operation fails for some reason.
        /// </exception>
        public override string ToString()
        {
            Span<byte> input = stackalloc byte[16];
            if (!_guid.TryWriteBytes(input))
                throw new InvalidOperationException("Cannot allocate SGuid string.");

            // Base64 URL encode the input
            int outputSize = checked((checked(input.Length + 2) / 3) * 4);
            Span<char> output = stackalloc char[outputSize];
            if (!Convert.TryToBase64Chars(input, output, out int charsWritten))
                throw new InvalidOperationException("Invalid GUID bytes.");

            for (int i = 0; i < charsWritten; i++)
            {
                switch (output[i])
                {
                    case '=':
                        return output[..i].ToString();
                    case '+':
                        output[i] = '-';
                        break;
                    case '/':
                        output[i] = '_';
                        break;
                }
            }

            return output[..charsWritten].ToString();
        }

        private static (bool Success, byte[]? Bytes, Exception? Exception) TryBase64UrlDecode(ReadOnlySpan<char> input)
        {
            if (input.Length == 0)
                return (false, Array.Empty<byte>(), null);

            int paddingCharsToAddForDecode = (input.Length % 4) switch
            {
                0 => 0,
                2 => 2,
                3 => 1,
                _ => -1,
            };

            if (paddingCharsToAddForDecode == -1)
                return (false, null, new ArgumentException("Input is malformed", nameof(input)));

            char[] buffer = new char[checked(input.Length + paddingCharsToAddForDecode)];

            int bufferIndex = 0, inputIndex = 0;
            while (bufferIndex < input.Length)
            {
                char ch = input[inputIndex];
                buffer[bufferIndex] = ch switch
                {
                    '-' => '+',
                    '_' => '/',
                    _ => ch,
                };
                bufferIndex++;
                inputIndex++;
            }

            for (; paddingCharsToAddForDecode > 0; --paddingCharsToAddForDecode)
            {
                buffer[bufferIndex] = '=';
                bufferIndex++;
            }

            Span<byte> decodedBytes = stackalloc byte[buffer.Length * 3 / 4];
            if (!Convert.TryFromBase64Chars(buffer, decodedBytes, out int bytesWritten))
                return (false, null, new ArgumentException("Invalid input.", nameof(input)));

            return (true, decodedBytes[..bytesWritten].ToArray(), null);
        }

        public static implicit operator Guid(ShortGuid shortGuid)
        {
            return shortGuid._guid;
        }

        public static implicit operator ShortGuid(Guid guid)
        {
            return new ShortGuid(guid);
        }

        public static implicit operator string(ShortGuid shortGuid)
        {
            return shortGuid.ToString();
        }

        public static implicit operator ShortGuid(string str)
        {
            return Parse(str);
        }

        public static implicit operator ShortGuid(ReadOnlySpan<char> chars)
        {
            return Parse(chars);
        }

        /// <summary>
        ///     Converts to and from <see cref="string"/>.
        /// </summary>
        private sealed class ShortGuidTypeConverter : TypeConverter
        {
            public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
                return sourceType == typeof(string);
            }

            public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
            {
                return value is string str ? Parse(str) : default;
            }

            public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            {
                return destinationType == typeof(string);
            }

            public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value,
                Type destinationType)
            {
                return ((ShortGuid)value).ToString();
            }
        }
    }
}
