#region --- License & Copyright Notice ---
/*
Useful code blocks that can included in your C# projects through NuGet
Copyright (c) 2012-2021 Jeevan James
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

<auto-generated>
    This code is downloaded from a CodeBits NuGet package.
</auto-generated>
*/
#endregion

#nullable enable

using System;
using System.ComponentModel;
using System.Globalization;

namespace CodeBits
{
    [TypeConverter(typeof(ShortGuidTypeConverter))]
    public readonly partial struct ShortGuid
    {
        private readonly Guid _guid;

        public ShortGuid(Guid guid)
        {
            _guid = guid;
        }

        public static ShortGuid Parse(string input)
        {
            return new Guid(Base64UrlDecode(input));
        }

        public override string ToString()
        {
            Span<byte> bytes = stackalloc byte[16];
            return _guid.TryWriteBytes(bytes)
                ? Base64UrlEncode(bytes.ToArray())
                : throw new InvalidOperationException("Cannot allocate SGuid string.");
        }

        private static string Base64UrlEncode(byte[] input)
        {
            if (input is null)
                throw new ArgumentNullException(nameof(input));

            int outputSize = checked((checked(input.Length + 2) / 3) * 4);
            char[] output = new char[outputSize];
            int outputBytes = Convert.ToBase64CharArray(input, 0, input.Length, output, 0);

            for (int i = 0; i < output.Length; i++)
            {
                switch (output[i])
                {
                    case '=':
                        return new string(output, 0, i);
                    case '+':
                        output[i] = '-';
                        break;
                    case '/':
                        output[i] = '_';
                        break;
                }
            }

            return new string(output, 0, outputBytes);
        }

        private static byte[] Base64UrlDecode(string input)
        {
            if (input is null)
                throw new ArgumentNullException(nameof(input));
            if (input.Length == 0)
                return Array.Empty<byte>();

            int paddingCharsToAddForDecode = (input.Length % 4) switch
            {
                0 => 0,
                2 => 2,
                3 => 1,
                _ => throw new ArgumentException("Input is malformed"),
            };

            char[] buffer = new char[checked(input.Length + paddingCharsToAddForDecode)];

            int bufferIndex = 0, inputIndex = 0;
            while (bufferIndex < input.Length)
            {
                char ch = input[inputIndex];
                buffer[bufferIndex] = ch switch
                {
                    '-' => '+',
                    '_' => '/',
                    _ => ch,
                };
                bufferIndex++;
                inputIndex++;
            }

            for (; paddingCharsToAddForDecode > 0; --paddingCharsToAddForDecode)
            {
                buffer[bufferIndex] = '=';
                bufferIndex++;
            }

            return Convert.FromBase64CharArray(buffer, 0, buffer.Length);
        }

        public static implicit operator Guid(ShortGuid shortGuid)
        {
            return shortGuid._guid;
        }

        public static implicit operator ShortGuid(Guid guid)
        {
            return new(guid);
        }

        public static implicit operator string(ShortGuid shortGuid)
        {
            return shortGuid.ToString();
        }

        public static implicit operator ShortGuid(string str)
        {
            return Parse(str);
        }

        /// <summary>
        ///     Converts to and from <see cref="string"/>.
        /// </summary>
        private sealed class ShortGuidTypeConverter : TypeConverter
        {
            public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
            {
                return sourceType == typeof(string);
            }

            public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
            {
                return value is string str ? Parse(str) : default;
            }

            public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
            {
                return destinationType == typeof(string);
            }

            public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value,
                Type destinationType)
            {
                return ((ShortGuid)value).ToString();
            }
        }
    }
}
