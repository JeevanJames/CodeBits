#region --- License & Copyright Notice ---
/*
Useful code blocks that can included in your C# projects through NuGet
Copyright (c) 2012-2021 Jeevan James
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

<auto-generated>
    This code is downloaded from a CodeBits NuGet package.
</auto-generated>
*/
#endregion

#nullable enable

using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Threading;
using System.Threading.Tasks;

#if CODEBITS_ASYNC_ENUMERABLE
using System.Runtime.CompilerServices;
#endif

namespace CodeBits
{
    public static partial class ResourceExtensions
    {
        /// <summary>
        ///     Loads the specified embedded resource as a string.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <param name="cancellationToken"></param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<string> LoadResourceAsStringAsync(this Assembly assembly, string resourceName,
            CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceInternal(null, resourceName, StringConverter, cancellationToken);
        }

        /// <summary>
        ///     Loads the specified embedded resource as a string.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="type">
        ///     The type whose namespace is used to scope the embedded resource name.
        /// </param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <param name="cancellationToken"></param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<string> LoadResourceAsStringAsync(this Assembly assembly, Type type, string resourceName,
            CancellationToken cancellationToken = default)
        {
            if (type is null)
                throw new ArgumentNullException(nameof(type));
            return assembly.LoadResourceInternal(type, resourceName, StringConverter, cancellationToken);
        }

        private static async Task<string> StringConverter(Stream resourceStream, CancellationToken cancellationToken)
        {
            using StreamReader reader = new(resourceStream);
            return await reader.ReadToEndAsync().ConfigureAwait(false);
        }

#if CODEBITS_ASYNC_ENUMERABLE
        public static IAsyncEnumerable<string> LoadResourceAsLinesAsync(this Assembly assembly, string resourceName,
            [EnumeratorCancellation] CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceAsEnumerableAsync(null, resourceName, LinesConverter, cancellationToken);
        }

        public static IAsyncEnumerable<string> LoadResourceAsLinesAsync(this Assembly assembly, Type type,
            string resourceName, [EnumeratorCancellation] CancellationToken cancellationToken = default)
        {
            if (type is null)
                throw new ArgumentNullException(nameof(type));
            return assembly.LoadResourceAsEnumerableAsync(type, resourceName, LinesConverter, cancellationToken);
        }

        private static async IAsyncEnumerable<string> LinesConverter(Stream resourceStream,
            [EnumeratorCancellation] CancellationToken cancellationToken)
        {
            using var reader = new StreamReader(resourceStream);

            string line;
            while (!cancellationToken.IsCancellationRequested
                   && (line = await reader.ReadLineAsync().ConfigureAwait(false)) is not null)
            {
                yield return line;
            }
        }
#else
        public static Task<IEnumerable<string>> LoadResourceAsLinesAsync(this Assembly assembly, string resourceName,
            CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceInternal(null, resourceName, LinesConverter, cancellationToken);
        }

        public static Task<IEnumerable<string>> LoadResourceAsLinesAsync(this Assembly assembly, Type type,
            string resourceName, CancellationToken cancellationToken = default)
        {
            if (type is null)
                throw new ArgumentNullException(nameof(type));
            return assembly.LoadResourceInternal(type, resourceName, LinesConverter, cancellationToken);
        }

        private static async Task<IEnumerable<string>> LinesConverter(Stream resourceStream,
            CancellationToken cancellationToken)
        {
            using StreamReader reader = new(resourceStream);

            var lines = new List<string>();

            string line = await reader.ReadLineAsync().ConfigureAwait(false);
            while (line is not null)
            {
                lines.Add(line);
                line = await reader.ReadLineAsync().ConfigureAwait(false);
            }

            return lines;
        }
#endif

        /// <summary>
        ///     Loads the specified embedded resource as a byte array.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <param name="cancellationToken"></param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<byte[]> LoadResourceAsBinaryAsync(this Assembly assembly, string resourceName,
            CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceInternal(null, resourceName, BinaryConverter, cancellationToken);
        }

        /// <summary>
        ///     Loads the specified embedded resource as a byte array.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="type">
        ///     The type whose namespace is used to scope the embedded resource name.
        /// </param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <param name="cancellationToken"></param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<byte[]> LoadResourceAsBinaryAsync(this Assembly assembly, Type type, string resourceName,
            CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceInternal(type, resourceName, BinaryConverter, cancellationToken);
        }

        private static async Task<byte[]> BinaryConverter(Stream resourceStream, CancellationToken cancellationToken)
        {
            await using var ms = new MemoryStream();
            await resourceStream.CopyToAsync(ms, cancellationToken).ConfigureAwait(false);
            return ms.ToArray();
        }

        public static Task<T> LoadResourceAsync<T>(this Assembly assembly, string resourceName,
            Func<Stream, CancellationToken, Task<T>> converter, CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceInternal(null, resourceName, converter, cancellationToken);
        }

        public static Task<T> LoadResourceAsync<T>(this Assembly assembly, Type nsScopedType, string resourceName,
            Func<Stream, CancellationToken, Task<T>> converter, CancellationToken cancellationToken = default)
        {
            if (nsScopedType is null)
                throw new ArgumentNullException(nameof(nsScopedType));
            return assembly.LoadResourceInternal(nsScopedType, resourceName, converter, cancellationToken);
        }

        public static Task<T> LoadResourceAsync<T>(this Assembly assembly, string resourceName,
            Func<string, CancellationToken, Task<T>> converter, CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourceInternal(null, resourceName, async (stream, ct) =>
            {
                string str = await StringConverter(stream, ct).ConfigureAwait(false);
                return await converter(str, ct).ConfigureAwait(false);
            }, cancellationToken);
        }

        public static Task<T> LoadResourceAsync<T>(this Assembly assembly, Type nsScopedType, string resourceName,
            Func<string, CancellationToken, Task<T>> converter, CancellationToken cancellationToken = default)
        {
            if (nsScopedType is null)
                throw new ArgumentNullException(nameof(nsScopedType));
            return assembly.LoadResourceInternal(nsScopedType, resourceName, async (stream, ct) =>
            {
                string str = await StringConverter(stream, ct).ConfigureAwait(false);
                return await converter(str, ct).ConfigureAwait(false);
            }, cancellationToken);
        }

        private static Task<T> LoadResourceInternal<T>(this Assembly assembly, Type? nsScopedType, string resourceName,
            Func<Stream, CancellationToken, Task<T>> converter, CancellationToken cancellationToken)
        {
            if (assembly is null)
                throw new ArgumentNullException(nameof(assembly));
            if (resourceName is null)
                throw new ArgumentNullException(nameof(resourceName));
            if (resourceName.Trim().Length == 0)
                throw new ArgumentException("Specify a valid resource name.", nameof(resourceName));

            Stream? resourceStream = nsScopedType is null
                ? assembly.GetManifestResourceStream(resourceName)
                : assembly.GetManifestResourceStream(nsScopedType, resourceName);

            if (resourceStream is null)
                throw new MissingManifestResourceException($"Could not find resource named {resourceName}.");

            return converter(resourceStream, cancellationToken);
        }

#if CODEBITS_ASYNC_ENUMERABLE
        private static IAsyncEnumerable<T> LoadResourceAsEnumerableAsync<T>(this Assembly assembly, Type? nsScopedType,
            string resourceName, Func<Stream, CancellationToken, IAsyncEnumerable<T>> converter,
            [EnumeratorCancellation] CancellationToken cancellationToken)
        {
            if (assembly is null)
                throw new ArgumentNullException(nameof(assembly));
            if (resourceName is null)
                throw new ArgumentNullException(nameof(resourceName));
            if (resourceName.Trim().Length == 0)
                throw new ArgumentException("Specify a valid resource name.", nameof(resourceName));

            Stream? resourceStream = nsScopedType is null
                ? assembly.GetManifestResourceStream(resourceName)
                : assembly.GetManifestResourceStream(nsScopedType, resourceName);

            if (resourceStream is null)
                throw new MissingManifestResourceException($"Could not find resource named {resourceName}.");

            return converter(resourceStream, cancellationToken);
        }
#endif
    }

    public static partial class ResourceExtensions
    {
#if CODEBITS_ASYNC_ENUMERABLE
        public static async IAsyncEnumerable<KeyValuePair<string, T>> LoadResourcesInternal<T>(this Assembly assembly,
            Func<string, bool> resourceSelector,
            Func<Stream, CancellationToken, Task<T>> converter,
            Func<string, string>? nameConverter = null,
            [EnumeratorCancellation] CancellationToken cancellationToken = default)
        {
            if (assembly is null)
                throw new ArgumentNullException(nameof(assembly));
            if (resourceSelector is null)
                throw new ArgumentNullException(nameof(resourceSelector));
            if (converter is null)
                throw new ArgumentNullException(nameof(converter));

            string[] resourceNames = assembly.GetManifestResourceNames();
            foreach (string resourceName in resourceNames)
            {
                if (!resourceSelector(resourceName))
                    continue;

                Stream? resourceStream = assembly.GetManifestResourceStream(resourceName);
                yield return new KeyValuePair<string, T>(nameConverter?.Invoke(resourceName) ?? resourceName,
                    await converter(resourceStream, cancellationToken).ConfigureAwait(false));
            }
        }
#else
        public static Task<IEnumerable<KeyValuePair<string, T>>> LoadResourcesInternal<T>(this Assembly assembly,
            Func<string, bool> resourceSelector,
            Func<string, CancellationToken, Task<T>> converter,
            Func<string, string>? nameConverter = null,
            CancellationToken cancellationToken = default)
        {
            return assembly.LoadResourcesInternal(resourceSelector, async (stream, ct) =>
            {
                string str = await StringConverter(stream, ct);
                return await converter(str, ct);
            }, nameConverter, cancellationToken);
        }

        public static async Task<IEnumerable<KeyValuePair<string, T>>> LoadResourcesInternal<T>(this Assembly assembly,
            Func<string, bool> resourceSelector,
            Func<Stream, CancellationToken, Task<T>> converter,
            Func<string, string>? nameConverter = null,
            CancellationToken cancellationToken = default)
        {
            if (assembly is null)
                throw new ArgumentNullException(nameof(assembly));
            if (resourceSelector is null)
                throw new ArgumentNullException(nameof(resourceSelector));
            if (converter is null)
                throw new ArgumentNullException(nameof(converter));

            var resources = new List<KeyValuePair<string, T>>();

            string[] resourceNames = assembly.GetManifestResourceNames();
            foreach (string resourceName in resourceNames)
            {
                if (!resourceSelector(resourceName))
                    continue;

                Stream? resourceStream = assembly.GetManifestResourceStream(resourceName);
                resources.Add(new KeyValuePair<string,T>(nameConverter?.Invoke(resourceName) ?? resourceName,
                    await converter(resourceStream, cancellationToken).ConfigureAwait(false)));
            }

            return resources;
        }
#endif
    }
}
