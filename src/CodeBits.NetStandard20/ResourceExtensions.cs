#region --- License & Copyright Notice ---
/*
Useful code blocks that can included in your C# projects through NuGet
Copyright (c) 2012-2021 Jeevan James
All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

<auto-generated>
    This code is downloaded from a CodeBits NuGet package.
</auto-generated>
*/
#endregion

#nullable enable

using System;
using System.IO;
using System.Reflection;
using System.Resources;
using System.Threading.Tasks;

namespace CodeBits
{
    public static class ResourceExtensions
    {
        /// <summary>
        ///     Loads the specified embedded resource as a string.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<string> LoadResourceAsString(this Assembly assembly, string resourceName)
        {
            return assembly.LoadResource(null, resourceName, StringConverter);
        }

        /// <summary>
        ///     Loads the specified embedded resource as a string.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="type">
        ///     The type whose namespace is used to scope the embedded resource name.
        /// </param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<string> LoadResourceAsString(this Assembly assembly, Type type, string resourceName)
        {
            if (type is null)
                throw new ArgumentNullException(nameof(type));
            return assembly.LoadResource(type, resourceName, StringConverter);
        }

        private static async Task<string> StringConverter(Stream resourceStream)
        {
            using StreamReader reader = new(resourceStream);
            return await reader.ReadToEndAsync().ConfigureAwait(false);
        }

        /// <summary>
        ///     Loads the specified embedded resource as a byte array.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<byte[]> LoadResourceAsBinary(this Assembly assembly, string resourceName)
        {
            return assembly.LoadResource(null, resourceName, BinaryConverter);
        }

        /// <summary>
        ///     Loads the specified embedded resource as a byte array.
        /// </summary>
        /// <param name="assembly">The assembly to load the embedded resource from.</param>
        /// <param name="type">
        ///     The type whose namespace is used to scope the embedded resource name.
        /// </param>
        /// <param name="resourceName">
        ///     The case-sensitive name of the embedded resource to load.
        /// </param>
        /// <returns>The embedded resource content as a string.</returns>
        /// <exception cref="ArgumentNullException">
        ///     The <paramref name="assembly"/> or <paramref name="resourceName"/> is <c>null</c>.
        /// </exception>
        /// <exception cref="MissingManifestResourceException">
        ///     The specified resource could not be found.
        /// </exception>
        public static Task<byte[]> LoadResourceAsBinary(this Assembly assembly, Type type, string resourceName)
        {
            return assembly.LoadResource(type, resourceName, BinaryConverter);
        }

        private static async Task<byte[]> BinaryConverter(Stream resourceStream)
        {
            using MemoryStream ms = new();
            await resourceStream.CopyToAsync(ms).ConfigureAwait(false);
            return ms.ToArray();
        }

        private static Task<T> LoadResource<T>(this Assembly assembly, Type? nsScopedType, string resourceName,
            Func<Stream, Task<T>> converter)
        {
            if (assembly is null)
                throw new ArgumentNullException(nameof(assembly));
            if (resourceName is null)
                throw new ArgumentNullException(nameof(resourceName));
            if (resourceName.Trim().Length == 0)
                throw new ArgumentException("Specify a valid resource name.", nameof(resourceName));

            Stream? resourceStream = nsScopedType is null
                ? assembly.GetManifestResourceStream(resourceName)
                : assembly.GetManifestResourceStream(nsScopedType, resourceName);

            if (resourceStream is null)
                throw new MissingManifestResourceException($"Could not find resource named {resourceName}.");

            return converter(resourceStream);
        }
    }
}
